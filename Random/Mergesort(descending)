#include <iostream>
#include<bits/stdc++.h>
using namespace std;

    int merge(vector<int> &tempArray,vector<int> &a,int lowerIndexCursor,int higerIndex,int upperIndex){
        int tempIndex=0;
        int res=0;
        int lowerIndex = lowerIndexCursor;
        int midIndex = higerIndex-1;
        int totalItems = upperIndex-lowerIndex+1;
        while(lowerIndex <= midIndex && higerIndex <= upperIndex){
            if(a[lowerIndex] > a[higerIndex]){
                if(a[lowerIndex]>(2*a[higerIndex])){
                    res+=(midIndex-lowerIndex);
                }
                tempArray[tempIndex++] = a[lowerIndex++];
            }else{
                tempArray[tempIndex++] = a[higerIndex++];
            }
        }
 
        while(lowerIndex <= midIndex){
            tempArray[tempIndex++] = a[lowerIndex++];
        }
 
        while(higerIndex <= upperIndex){
            tempArray[tempIndex++] = a[higerIndex++];
        }
 
        for(int i=0;i<totalItems;i++){
            a[lowerIndexCursor+i] = tempArray[i];
        }
        return res;
    }
    int mergeSort(vector<int>&tempArray,vector<int>&a,int lowerIndex,int upperIndex){
        int res=0;
        if(lowerIndex == upperIndex){
            return res;
        }else{
            int mid = (lowerIndex+upperIndex)/2;
            res+=mergeSort(tempArray,a, lowerIndex, mid);
            res+=mergeSort(tempArray,a, mid+1, upperIndex);
            res+=merge(tempArray,a,lowerIndex,mid+1,upperIndex);
        }
        return res;
    }
 
    int sort(vector<int> &a){
        int res=0;
        vector<int> tempArray(a.size());
        res=mergeSort(tempArray,a,0,a.size()-1);
        return res;
    }
    void printArray(vector<int> array){
        for(int i : array){
            cout<<i<<" ";
        }
    }
 
 

int main() {
 
        vector<int> a ={1,3,-2,-3,1};
        printArray(a);
        int res=0;
        res=sort(a);
        cout<<endl;
        cout<<"res"<<res<<endl;
        
        printArray(a);
        return 0;
}
